-- initial commands
.headers off
.separator ','

-- (a) Import data
-- [insert sql statement(s) below]
CREATE TABLE athletes(
    id integer,
    sex text,
    dob text,
    height float,
    weight integer,
    nationality text
    );
.separator ','
.import athletes.csv athletes

CREATE TABLE countries(
    country text,
    code text,
    population integer,
    gdp float
);
.import countries.csv countries

CREATE TABLE games(
    id integer,
    name text,
    nationality text,
    sport text,
    gold integer,
    silver integer,
    bronze integer
);
.import games.csv games

-- (b) Build indexes
-- [insert sql statement(s) below]
CREATE INDEX id_index ON athletes(id);
CREATE INDEX nationality_index ON athletes(nationality);
CREATE INDEX id_games_index ON games(id);
CREATE INDEX code_index ON countries(code);

-- (c) Quick computation.
-- [insert sql statement(s) below]


SELECT SUM(gold) FROM games WHERE nationality='USA' AND gold>0;
select '';

-- (d) Distinct Sports.
-- [insert sql statement(s) below]

SELECT DISTINCT(sport) FROM games WHERE nationality='USA' AND gold>0 ORDER BY sport;
select '';

-- (e) Handling Empty Cells.
-- [insert sql statement(s) below]
UPDATE countries SET population = NULL where population = '';
SELECT country, SUM(gold+silver+bronze) FROM countries 
INNER JOIN games ON code=nationality 
GROUP BY country ORDER BY population DESC LIMIT 5;
select '';

-- (f) Female Athletes.
-- [insert sql statement(s) below]
SELECT c.country, COUNT(g.gold) gs from countries c 
INNER JOIN games g ON c.code=g.nationality 
INNER JOIN athletes a on g.id = a.id 
WHERE a.sex='female' AND g.gold > 0 GROUP BY country ORDER BY gs DESC LIMIT 5;
select '';

-- (g) Fit Athletes
-- [insert sql statement(s) below]
SELECT g.name, (a.weight/(a.height*a.height)) bmi FROM games g 
INNER JOIN athletes a ON g.id = a.id WHERE bmi >= 18.5 AND bmi <= 24.9 
ORDER BY g.name, bmi DESC LIMIT 10;
select '';

-- (h) Percentages of Gold & Silver Medals.
-- [insert sql statement(s) below]
SELECT c.country, CAST(SUM(g.gold)*100.0/gt AS INT) git, CAST(SUM(g.silver)*100.0/st AS INT) sit FROM countries c 
INNER JOIN games g on c.code=g.nationality 
INNER JOIN (SELECT SUM(gold) as gt, SUM(silver) as st FROM games) 
GROUP BY c.code ORDER BY git DESC, sit DESC LIMIT 20;
select '';

-- (i) Creating a view.
-- [insert sql statement(s) below]
CREATE VIEW gdp_metrics AS
SELECT c1.country as full_country1_name, c2.country as full_country1_name, c1.gdp-c2.gdp as diff FROM 
(
 (SELECT * FROM countries where gdp!='') c1 
 INNER JOIN (SELECT * FROM countries where gdp!='') c2 
 ON c1.code!=c2.code
) WHERE diff > 0 AND diff <= 100 ORDER BY diff DESC;
SELECT * FROM gdp_metrics ORDER BY diff DESC LIMIT 5;
select '';

-- (j) Count total pairs.
-- [insert sql statement(s) below]
SELECT COUNT(*) FROM gdp_metrics;
select '';

-- (k) Create and import data into FTS table movie_overview.
-- [insert sql statement(s) below]
CREATE VIRTUAL TABLE movie_overview USING fts4(
    id integer, 
    name text, 
    year integer, 
    overview text, 
    popularity decimal);
.separator ','
.import movie-overview.txt movie_overview

-- (k) part 1
-- [insert sql statement(s) below]

SELECT COUNT(*) from movie_overview WHERE overview MATCH '^in';
select '';

-- (k) part 2
-- [insert sql statement(s) below]

SELECT id from movie_overview WHERE overview MATCH 'love NEAR/7 city';
select '';

-- (k) part 3
-- [insert sql statement(s) below]
SELECT name from movie_overview WHERE overview MATCH 'geo*';